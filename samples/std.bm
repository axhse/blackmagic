*** THE SIMPLEST COMMON.

* Returns nothing.
doNothing x: = nothing;

* Returns the result.
returnResult result x: = result;

* Returns a new line symbol.
newLine: = escape 'n';



*** TYPE.

* Returns true if the value may be used as a value of a given type, otherwise false.
is value type:
    = equals (getType value) type;



*** ERROR.

* Returns an assertion error with the given message if the condition is false, otherwise true.
assert condition errorMessage:
    = ifElse condition true (createError 'assertion' errorMessage);

* Returns a type error with the given message if the value has not expected type, otherwise true.
assertType value expectedType errorMessage:
    = ifElse (is value expectedType) true (createError 'type' errorMessage);

* Returns the second value if the first value is an error, otherwise nothing.
ifIsError maybeError onError:
    = ifElse (is maybeError #error) onError nothing;

* Returns the first value if it is an error, otherwise the second value.
ifNoError maybeError onNoError:
    = ifElse (is maybeError #error) maybeError onNoError;



*** LOGIC.

* Returns true if any value is true, otherwise false.
or first second:
    = not (and (not first) (not second));



*** NUMBER.

* Returns true if the first value is more than the second value, otherwise false.
more first second:
    = less second first;

* Returns true if the first value is not less than the second value, otherwise false.
notLess first second:
    = not (less first second);

* Returns true if the first value is not more than the second value, otherwise false.
notMore first second:
    = not (more first second);

* Returns smallest of the two numbers.
min first second:
    = ifElse (less first second) first second;

* Returns largest of the two numbers.
max first second:
    = ifElse (more first second) first second;

* Returns the negation of the number.
negate value:
    = multiply value -1;

* Returns the absolute value of an integer.
abs value:
    = max value (negate value);

* Returns the difference of two numbers.
minus first second:
    = plus first (negate second);

* Returns an incremented number.
increment value:
    = plus value 1;

* Returns a decremented number.
decrement value:
    = minus value 1;

* Returns the b of equation: divisible = x * divisor + b, where 0 <= |b| < |divisor| and 0 <= b * divisor.
remainder divisible divisor:
    = minus divisible (multiply divisor (divideWithRemainder divisible divisor));



*** ARRAY AND STRING.

* Returns true if array has value at index, otherwise false.
hasIndex sequence index:
    = and (notMore 0 index) (less index (length sequence));



*** ARRAY.

** UTIL: Merge.
stdHelperMerge result other index:
    arrayHasIndex = hasIndex other index;
    result = ifElse arrayHasIndex (append result (at other index)) result;
    resultDelegate = ifElse arrayHasIndex (stdHelperMerge result other) (returnResult result);
    = resultDelegate (increment index);

* Returns an array result of two array merge.
merge first second:
    = stdHelperMerge first second 0;

** UTIL: Slice.
stdHelperSlice result array start end index:
    arrayHasIndex = hasIndex array index;
    isInRange = and (notMore start index) (less index end);
    mayGetValue = and arrayHasIndex isInRange;
    result = ifElse mayGetValue (append result (at array index)) result;
    nextIndex = increment index;
    hasNextValue = and (hasIndex array nextIndex) (less nextIndex end);
    resultDelegate = ifElse hasNextValue (stdHelperSlice result array start end) (returnResult result);
    = resultDelegate nextIndex;

* Returns an array that contains values of given array at specified range [start; end).
slice array start end:
    start = ifElse (less start 0) 0 start;
    end = ifElse (less end start) start end;
    = stdHelperSlice empty array start end start;

** UTIL: Map.
stdHelperMap result array mapper index:
    arrayHasIndex = hasIndex array index;
    newValue = mapper (at array index);
    result = ifElse arrayHasIndex (append result newValue) result;
    resultDelegate = ifElse arrayHasIndex (stdHelperMap result array mapper) (returnResult result);
    = resultDelegate (increment index);

* Applies mapper function to all array values and returns an array of new values.
map array mapper:
    = stdHelperMap empty array mapper 0;

** UTIL: Filter.
stdHelperFilter result array filterFunc index:
    arrayHasIndex = hasIndex array index;
    value = at array index;
    passes = filterFunc value;
    passes = ifElse (is passes #boolean) passes false;
    shouldBeAdded = and arrayHasIndex passes;
    result = ifElse shouldBeAdded (append result value) result;
    resultDelegate = ifElse arrayHasIndex (stdHelperFilter result array filterFunc) (returnResult result);
    = resultDelegate (increment index);

* Applies filter function to all array values and returns an array of values that fit the filter.
filter array filterFunc:
    = stdHelperFilter empty array filterFunc 0;

* Returns an array with the given value at the specified existing index.
set array index value:
    start = slice array 0 index;
    end = slice array (increment index) (length array);
    result = merge (append start value) end;
    arrayHasIndex = hasIndex array index;
    error = createError 'logic' 'set: The index is out of the bounds for the array.';
    maybeError = ifElse arrayHasIndex nothing error;
    = ifNoError maybeError result;
